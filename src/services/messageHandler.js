
import {respuestadetrigger, isPhoneNumberRegistered } from './googleSheetsService.js';
import whatsappService from './whatsappService.js';
import { randomMessageService } from './randomMessageService.js';
import InteractiveMenus from './InteractiveMenus.js'; // Asumiendo que los mÃ©todos de menÃº estÃ¡n en este archivo


class MessageHandler {
    constructor() {
      this.interactiveMenus = new InteractiveMenus(); // Instancia de los menÃºs interactivos
  
    }
  
async handleIncomingMessage(message, senderInfo) {
    const fromNumber = message.from.slice(0, 2) + message.from.slice(3);

    // Extraer el contenido del mensaje
    const incomingMessage = message.type === "interactive" ? message.interactive.list_reply.id :
                            message.type === "text" ? message.text.body.toLowerCase().trim() :
                            null;

    if (!incomingMessage) {
        await whatsappService.sendMessage(fromNumber, "Mensaje no reconocido. Por favor, intÃ©ntalo nuevamente.");
        return;
    }

    // Verificar si el mensaje es un saludo o un comando de menÃº
    if (this.isGreeting(incomingMessage)) {
        await this.handleGreeting(fromNumber, senderInfo);
    } else if (this.isMenuCommand(incomingMessage)) {
        await this.interactiveMenus.sendMainMenu(fromNumber);
    } else {
        // Procesar mensajes interactivos y texto normalmente
        const response = await respuestadetrigger(incomingMessage);
        if (response) {
            await this.processResponse(response, fromNumber);
        } else {
            await whatsappService.sendMessage(fromNumber, "No puedo entender el mensaje. Â¿Puedes intentar de nuevo? ğŸ˜Š");
        }
    }

    // Marcar el mensaje como leÃ­do despuÃ©s de procesar la respuesta
    await whatsappService.markAsRead(message.id);
}

isMenuCommand(incomingMessage) {
    const menuCommands = [
        "menu", "menÃº", "ver menÃº", "dame el menÃº", "quiero el menÃº", "opciones",
        "lista de opciones", "mostrar menÃº", "quÃ© opciones hay", "dame opciones",
        "regresar", "volver", "atrÃ¡s", "ir atrÃ¡s", "volver al menÃº", "regresar al inicio",
        "regrÃ©same", "cÃ³mo regreso", "quiero regresar", "inicio", "volver al inicio",
        "ir al inicio", "home", "empezar de nuevo", "volver a empezar", "quiero empezar",
        "dame inicio", "pÃ¡same el menÃº", "muÃ©strame opciones", "mÃ¡ndame el menÃº",
        "Ã©chame el menÃº", "otra vez el menÃº", "vuelve al inicio", "vamos al menÃº",
        "quiero opciones", "muÃ©strame quÃ© hay"
    ];
    return menuCommands.some(cmd => incomingMessage.includes(cmd));
}

isGreeting(message) {
    const greetings = [
        "hola", "holaa", "holaaa", "ola", "alo", "holis", "holiwis", 
        "hello", "hi", "hey", "hi there", "hello there", "holi",
        "buenas", "buenos dias", "buenos dÃ­as", "buen dia", "buen dÃ­a", 
        "buenas tardes", "buenas noches", 
        "quÃ© tal", "que tal", "cÃ³mo estÃ¡s", "como estas", "quÃ© onda", "que onda",
        "quÃ© pasÃ³", "que paso", "quÃ© hay", "que hay", "quÃ© hubo", "que hubo",
        "quÃ© rollo", "que rollo", "quÃ© tranza", "que tranza", "quÃ© pex", "que pex",
        "quÃ© pedo", "que pedo", "quÃ© show", "que show", 
        "saludos", "cÃ³mo andas", "como andas", "cÃ³mo te va", "como te va",
        "quÃ© pedo compa", "que pedo compa", "quÃ© pasÃ³ amigo", "que paso amigo",
        "quÃ© tal amigo", "que tal amigo", "buenas mi gente", "quÃ© onda banda",
        "que onda banda", "quÃ© hubo raza", "que hubo raza"
    ];
    return greetings.some(greeting => message.includes(greeting));
}

async handleGreeting(fromNumber, senderInfo) {
    const name = senderInfo?.profile?.name || "amigx";
    await whatsappService.sendMessage(fromNumber, `Â¡ğŸŒ¸ Hola ${name}! *Soy Aurora, tu compaÃ±era en este camino de maternidad.* ğŸ¤°ğŸ’– Estoy aquÃ­ para escucharte, acompaÃ±arte y brindarte informaciÃ³n Ãºtil en cada etapa de tu embarazo. EscrÃ­beme cuando lo necesites o explora el menÃº para descubrir cÃ³mo puedo apoyarte.`);
}

async processResponse(response, fromNumber) {
    switch (response.type) {
        case 'text':
            await whatsappService.sendMessage(fromNumber, response.message);
            break;
        case 'image':
        case 'video':
        case 'document':
            await whatsappService.sendMediaMessage(fromNumber, response.type, response.url, response.caption);
            break;
        default:
            await whatsappService.sendMessage(fromNumber, "Tipo de respuesta no soportado.");
            break;
    }
}


   async processResponse(response, fromNumber) {
          if (!response) {
              await whatsappService.sendMessage(fromNumber, "Detalla mÃ¡s tu consulta :)");
              return;
          }
  
          switch (response.type) {
              case 'text':
                  await whatsappService.sendMessage(fromNumber, response.message);
                  randomMessageService.startSingleMessageTimer(fromNumber);

                  break;
              case 'image':
                  await whatsappService.sendMediaMessage(fromNumber, 'image', response.url, response.caption);
                  randomMessageService.startSingleMessageTimer(fromNumber);
                  break;
              case 'video':
                  await whatsappService.sendMediaMessage(fromNumber, 'video', response.url, response.caption);
                  randomMessageService.startSingleMessageTimer(fromNumber);
                  break;
              case 'document':
                  await whatsappService.sendMediaMessage(fromNumber, 'document', response.url, response.caption);
                  randomMessageService.startSingleMessageTimer(fromNumber);
                  break;
              case 'menu':
                  await this.interactiveMenus.executeMenuFunction(response.message, fromNumber);
                  randomMessageService.startSingleMessageTimer(fromNumber);
                  break;
              default:
                  await whatsappService.sendMessage(fromNumber, "Tipo de respuesta no soportado.");
                  break;
          }
  
      }
  

    
    async handleInteractiveResponse(action, fromNumber) {
          const response = await this.interactiveMenus.respuestadetrigger(action);
          await this.processResponse(response, fromNumber);
      }
 }  
export default new MessageHandler();

